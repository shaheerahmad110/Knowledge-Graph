DataFrame has,Syntax,Description:,Label,Type,parameters,cut_syntax
Constructor,"DataFrame([data, index, columns, dtype, copy])","Two-dimensional, size-mutable, potentially heterogeneous tabular data.",constructor,Function,"['data', 'index', 'columns', 'dtype', 'copy']",DataFrame()
Attributes and underlying data,DataFrame.index,The index (row labels) of the DataFrame.,index information,Attribute,,DataFrame.index
Attributes and underlying data,DataFrame.columns,The column labels of the DataFrame.,column label,Attribute,,DataFrame.columns
Attributes and underlying data,DataFrame.dtypes,Return the dtypes in the DataFrame.,find datatypes,Attribute,,DataFrame.dtypes
Attributes and underlying data,"DataFrame.info([verbose, buf, max_cols, ...])",Print a concise summary of a DataFrame.,data summary,Function,"['verbose', 'buf', 'max_cols', '...']",DataFrame.info()
Attributes and underlying data,"DataFrame.select_dtypes([include, exclude])",Return a subset of the DataFrame's columns based on the column dtypes.,select datatypes,Function,"['include', 'exclude']",DataFrame.select_dtypes()
Attributes and underlying data,DataFrame.values,Return a Numpy representation of the DataFrame.,dataframe to numpy,Attribute,,DataFrame.values
Attributes and underlying data,DataFrame.axes,Return a list representing the axes of the DataFrame.,axes labels,Attribute,,DataFrame.axes
Attributes and underlying data,DataFrame.ndim,Return an int representing the number of axes / array dimensions.,dimention,Attribute,,DataFrame.ndim
Attributes and underlying data,DataFrame.size,Return an int representing the number of elements in this object.,size of data,Attribute,,DataFrame.size
Attributes and underlying data,DataFrame.shape,Return a tuple representing the dimensionality of the DataFrame.,shape of data,Attribute,,DataFrame.shape
Attributes and underlying data,"DataFrame.memory_usage([index, deep])",Return the memory usage of each column in bytes.,memory usage,Function,"['index', 'deep']",DataFrame.memory_usage()
Attributes and underlying data,DataFrame.empty,Indicator whether Series/DataFrame is empty.,empty or not,Attribute,,DataFrame.empty
Attributes and underlying data,"DataFrame.set_flags(*[, copy, ...])",Return a new object with updated flags.,allow duplicates or not,Function,"['*', 'copy', '...']",DataFrame.set_flags()
Conversion,"DataFrame.astype(dtype[, copy, errors])",Cast a pandas object to a specified dtype dtype.,change datatype,Function,"['dtype', 'copy', 'errors']",DataFrame.astype()
Conversion,"DataFrame.convert_dtypes([infer_objects, ...])",Convert columns to best possible dtypes using dtypes supporting pd.NA.,find best possible datatype,Function,"['infer_objects', '...']",DataFrame.convert_dtypes()
Conversion,DataFrame.infer_objects(),Attempt to infer better dtypes for object columns.,find better datatype,Function,[''],DataFrame.infer_objects()
Conversion,DataFrame.copy([deep]),Make a copy of this object's indices and data.,copy of dataframe,Function,['deep'],DataFrame.copy()
Conversion,DataFrame.bool(),Return the bool of a single element Series or DataFrame.,one row true or not,Function,[''],DataFrame.bool()
"Indexing, iteration",DataFrame.head([n]),Return the first n rows.,top first rows,Function,['n'],DataFrame.head()
"Indexing, iteration",DataFrame.at,Access a single value for a row/column label pair.,locate a cell,Attribute,,DataFrame.at
"Indexing, iteration",DataFrame.iat,Access a single value for a row/column pair by integer position.,locatea cell by index,Attribute,,DataFrame.iat
"Indexing, iteration",DataFrame.loc,Access a group of rows and columns by label(s) or a boolean array.,conditional locator,Attribute,,DataFrame.loc
"Indexing, iteration",DataFrame.iloc,Purely integer-location based indexing for selection by position.,index locator,Attribute,,DataFrame.iloc
"Indexing, iteration","DataFrame.insert(loc, column, value[, ...])",Insert column into DataFrame at specified location.,insert column,Function,"['loc', 'column', 'value', '...']",DataFrame.insert()
"Indexing, iteration",DataFrame.__iter__(),Iterate over info axis.,iterate dataframe,Function,[''],DataFrame.__iter__()
"Indexing, iteration",DataFrame.items(),"Iterate over (column name, Series) pairs.",iterate columns,Function,[''],DataFrame.items()
"Indexing, iteration",DataFrame.iteritems(),"(DEPRECATED) Iterate over (column name, Series) pairs.",iterate column names,Function,[''],DataFrame.iteritems()
"Indexing, iteration",DataFrame.keys(),Get the 'info axis' (see Indexing for more).,get column names,Function,[''],DataFrame.keys()
"Indexing, iteration",DataFrame.iterrows(),"Iterate over DataFrame rows as (index, Series) pairs.",iterate rows,Function,[''],DataFrame.iterrows()
"Indexing, iteration","DataFrame.itertuples([index, name])",Iterate over DataFrame rows as namedtuples.,iterate each row as tuple,Function,"['index', 'name']",DataFrame.itertuples()
"Indexing, iteration","DataFrame.lookup(row_labels, col_labels)","(DEPRECATED) Label-based ""fancy indexing"" function for DataFrame.",find element by row and column,Function,"['row_labels', 'col_labels']",DataFrame.lookup()
"Indexing, iteration",DataFrame.pop(item),Return item and drop from frame.,delete column and store,Function,['item'],DataFrame.pop()
"Indexing, iteration",DataFrame.tail([n]),Return the last n rows.,print last element ,Function,['n'],DataFrame.tail()
"Indexing, iteration","DataFrame.xs(key[, axis, level, drop_level])",Return cross-section from the Series/DataFrame.,return crosss section,Function,"['key', 'axis', 'level', 'drop_level']",DataFrame.xs()
"Indexing, iteration","DataFrame.get(key[, default])",Get item from object for given key (ex: DataFrame column).,get dpecific column,Function,"['key', 'default']",DataFrame.get()
"Indexing, iteration",DataFrame.isin(values),Whether each element in the DataFrame is contained in values.,filter dataframe,Function,['values'],DataFrame.isin()
"Indexing, iteration","DataFrame.where(cond[, other, inplace, ...])",Replace values where the condition is False.,check false condition,Function,"['cond', 'other', 'inplace', '...']",DataFrame.where()
"Indexing, iteration","DataFrame.mask(cond[, other, inplace, axis, ...])",Replace values where the condition is True.,check true condition,Function,"['cond', 'other', 'inplace', 'axis', '...']",DataFrame.mask()
"Indexing, iteration","DataFrame.query(expr[, inplace])",Query the columns of a DataFrame with a boolean expression.,query columns,Function,"['expr', 'inplace']",DataFrame.query()
Binary operator functions,"DataFrame.add(other[, axis, level, fill_value])","Get Addition of dataframe and other, element-wise (binary operator add).",add dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.add()
Binary operator functions,"DataFrame.sub(other[, axis, level, fill_value])","Get Subtraction of dataframe and other, element-wise (binary operator sub).",subtract dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.sub()
Binary operator functions,"DataFrame.mul(other[, axis, level, fill_value])","Get Multiplication of dataframe and other, element-wise (binary operator mul).",multiply dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.mul()
Binary operator functions,"DataFrame.div(other[, axis, level, fill_value])","Get Floating division of dataframe and other, element-wise (binary operator truediv).",divide dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.div()
Binary operator functions,"DataFrame.truediv(other[, axis, level, ...])","Get Floating division of dataframe and other, element-wise (binary operator truediv).",divide dataframes,Function,"['other', 'axis', 'level', '...']",DataFrame.truediv()
Binary operator functions,"DataFrame.floordiv(other[, axis, level, ...])","Get Integer division of dataframe and other, element-wise (binary operator floordiv).",integer division of dataframes,Function,"['other', 'axis', 'level', '...']",DataFrame.floordiv()
Binary operator functions,"DataFrame.mod(other[, axis, level, fill_value])","Get Modulo of dataframe and other, element-wise (binary operator mod).",modulus of dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.mod()
Binary operator functions,"DataFrame.pow(other[, axis, level, fill_value])","Get Exponential power of dataframe and other, element-wise (binary operator pow).",exponential power of dataframe,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.pow()
Binary operator functions,DataFrame.dot(other),Compute the matrix multiplication between the DataFrame and other.,dot product,Function,['other'],DataFrame.dot()
Binary operator functions,"DataFrame.radd(other[, axis, level, fill_value])","Get Addition of dataframe and other, element-wise (binary operator radd).",add dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.radd()
Binary operator functions,"DataFrame.rsub(other[, axis, level, fill_value])","Get Subtraction of dataframe and other, element-wise (binary operator rsub).",subtract dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.rsub()
Binary operator functions,"DataFrame.rmul(other[, axis, level, fill_value])","Get Multiplication of dataframe and other, element-wise (binary operator rmul).",multiply dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.rmul()
Binary operator functions,"DataFrame.rdiv(other[, axis, level, fill_value])","Get Floating division of dataframe and other, element-wise (binary operator rtruediv).",divide dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.rdiv()
Binary operator functions,"DataFrame.rtruediv(other[, axis, level, ...])","Get Floating division of dataframe and other, element-wise (binary operator rtruediv).",divide dataframes,Function,"['other', 'axis', 'level', '...']",DataFrame.rtruediv()
Binary operator functions,"DataFrame.rfloordiv(other[, axis, level, ...])","Get Integer division of dataframe and other, element-wise (binary operator rfloordiv).",integer division of dataframes,Function,"['other', 'axis', 'level', '...']",DataFrame.rfloordiv()
Binary operator functions,"DataFrame.rmod(other[, axis, level, fill_value])","Get Modulo of dataframe and other, element-wise (binary operator rmod).",modulus of dataframes,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.rmod()
Binary operator functions,"DataFrame.rpow(other[, axis, level, fill_value])","Get Exponential power of dataframe and other, element-wise (binary operator rpow).",exponential power of dataframe,Function,"['other', 'axis', 'level', 'fill_value']",DataFrame.rpow()
Binary operator functions,"DataFrame.lt(other[, axis, level])","Get Less than of dataframe and other, element-wise (binary operator lt).",less than operation ,Function,"['other', 'axis', 'level']",DataFrame.lt()
Binary operator functions,"DataFrame.gt(other[, axis, level])","Get Greater than of dataframe and other, element-wise (binary operator gt).",greater than operation,Function,"['other', 'axis', 'level']",DataFrame.gt()
Binary operator functions,"DataFrame.le(other[, axis, level])","Get Less than or equal to of dataframe and other, element-wise (binary operator le).",less than equal to operation ,Function,"['other', 'axis', 'level']",DataFrame.le()
Binary operator functions,"DataFrame.ge(other[, axis, level])","Get Greater than or equal to of dataframe and other, element-wise (binary operator ge).",greater than equal to operation,Function,"['other', 'axis', 'level']",DataFrame.ge()
Binary operator functions,"DataFrame.ne(other[, axis, level])","Get Not equal to of dataframe and other, element-wise (binary operator ne).",not equal to operation,Function,"['other', 'axis', 'level']",DataFrame.ne()
Binary operator functions,"DataFrame.eq(other[, axis, level])","Get Equal to of dataframe and other, element-wise (binary operator eq).",equal to operation,Function,"['other', 'axis', 'level']",DataFrame.eq()
Binary operator functions,"DataFrame.combine(other, func[, fill_value, ...])",Perform column-wise combine with another DataFrame.,combine dataframes,Function,"['other', 'func', 'fill_value', '...']",DataFrame.combine()
Binary operator functions,DataFrame.combine_first(other),Update null elements with value in the same location in other.,union of two series,Function,['other'],DataFrame.combine_first()
"Function application, GroupBy & window","DataFrame.apply(func[, axis, raw, ...])",Apply a function along an axis of the DataFrame.,apply function axis wise,Function,"['func', 'axis', 'raw', '...']",DataFrame.apply()
"Function application, GroupBy & window","DataFrame.applymap(func[, na_action])",Apply a function to a Dataframe elementwise.,apply function element wise,Function,"['func', 'na_action']",DataFrame.applymap()
"Function application, GroupBy & window","DataFrame.pipe(func, *args, **kwargs)",Apply chainable functions that expect Series or DataFrames.,apply chanable function,Function,"['func', '*args', '**kwargs']",DataFrame.pipe()
"Function application, GroupBy & window","DataFrame.agg([func, axis])",Aggregate using one or more operations over the specified axis.,find aggregate,Function,"['func', 'axis']",DataFrame.agg()
"Function application, GroupBy & window","DataFrame.aggregate([func, axis])",Aggregate using one or more operations over the specified axis.,find aggregate,Function,"['func', 'axis']",DataFrame.aggregate()
"Function application, GroupBy & window","DataFrame.transform(func[, axis])",Call func on self producing a DataFrame with the same axis shape as self.,call function on dataframe,Function,"['func', 'axis']",DataFrame.transform()
"Function application, GroupBy & window","DataFrame.groupby([by, axis, level, ...])",Group DataFrame using a mapper or by a Series of columns.,group by,Function,"['by', 'axis', 'level', '...']",DataFrame.groupby()
"Function application, GroupBy & window","DataFrame.rolling(window[, min_periods, ...])",Provide rolling window calculations.,rolling window calculation,Function,"['window', 'min_periods', '...']",DataFrame.rolling()
"Function application, GroupBy & window","DataFrame.expanding([min_periods, center, ...])",Provide expanding window calculations.,expanding widow calculation,Function,"['min_periods', 'center', '...']",DataFrame.expanding()
"Function application, GroupBy & window","DataFrame.ewm([com, span, halflife, alpha, ...])",Provide exponentially weighted (EW) calculations.,perform exponentially weighted calculations,Function,"['com', 'span', 'halflife', 'alpha', '...']",DataFrame.ewm()
Computations / descriptive stats,DataFrame.abs(),Return a Series/DataFrame with absolute numeric value of each element.,find absolute values,Function,[''],DataFrame.abs()
Computations / descriptive stats,"DataFrame.all([axis, bool_only, skipna, level])","Return whether all elements are True, potentially over an axis.",all elements are true,Function,"['axis', 'bool_only', 'skipna', 'level']",DataFrame.all()
Computations / descriptive stats,"DataFrame.any([axis, bool_only, skipna, level])","Return whether any element is True, potentially over an axis.",any element is true,Function,"['axis', 'bool_only', 'skipna', 'level']",DataFrame.any()
Computations / descriptive stats,"DataFrame.clip([lower, upper, axis, inplace])",Trim values at input threshold(s).,trim values,Function,"['lower', 'upper', 'axis', 'inplace']",DataFrame.clip()
Computations / descriptive stats,"DataFrame.corr([method, min_periods, ...])","Compute pairwise correlation of columns, excluding NA/null values.",correlation,Function,"['method', 'min_periods', '...']",DataFrame.corr()
Computations / descriptive stats,"DataFrame.corrwith(other[, axis, drop, ...])",Compute pairwise correlation.,pair wise correlation,Function,"['other', 'axis', 'drop', '...']",DataFrame.corrwith()
Computations / descriptive stats,"DataFrame.count([axis, level, numeric_only])",Count non-NA cells for each column or row.,count not null,Function,"['axis', 'level', 'numeric_only']",DataFrame.count()
Computations / descriptive stats,"DataFrame.cov([min_periods, ddof, numeric_only])","Compute pairwise covariance of columns, excluding NA/null values.",covariance of column,Function,"['min_periods', 'ddof', 'numeric_only']",DataFrame.cov()
Computations / descriptive stats,"DataFrame.cummax([axis, skipna])",Return cumulative maximum over a DataFrame or Series axis.,cummulative maximum,Function,"['axis', 'skipna']",DataFrame.cummax()
Computations / descriptive stats,"DataFrame.cummin([axis, skipna])",Return cumulative minimum over a DataFrame or Series axis.,cummulative minimum,Function,"['axis', 'skipna']",DataFrame.cummin()
Computations / descriptive stats,"DataFrame.cumprod([axis, skipna])",Return cumulative product over a DataFrame or Series axis.,cummulative product,Function,"['axis', 'skipna']",DataFrame.cumprod()
Computations / descriptive stats,"DataFrame.cumsum([axis, skipna])",Return cumulative sum over a DataFrame or Series axis.,cummulative sum,Function,"['axis', 'skipna']",DataFrame.cumsum()
Computations / descriptive stats,"DataFrame.describe([percentiles, include, ...])",Generate descriptive statistics.,detailed summary,Function,"['percentiles', 'include', '...']",DataFrame.describe()
Computations / descriptive stats,"DataFrame.diff([periods, axis])",First discrete difference of element.,discrete difference,Function,"['periods', 'axis']",DataFrame.diff()
Computations / descriptive stats,"DataFrame.eval(expr[, inplace])",Evaluate a string describing operations on DataFrame columns.,evaluate string describing operation,Function,"['expr', 'inplace']",DataFrame.eval()
Computations / descriptive stats,"DataFrame.kurt([axis, skipna, level, ...])",Return unbiased kurtosis over requested axis.,unbiased kurtosis,Function,"['axis', 'skipna', 'level', '...']",DataFrame.kurt()
Computations / descriptive stats,"DataFrame.kurtosis([axis, skipna, level, ...])",Return unbiased kurtosis over requested axis.,unbiased kurtosis,Function,"['axis', 'skipna', 'level', '...']",DataFrame.kurtosis()
Computations / descriptive stats,"DataFrame.mad([axis, skipna, level])",(DEPRECATED) Return the mean absolute deviation of the values over the requested axis.,mean absolute deviation,Function,"['axis', 'skipna', 'level']",DataFrame.mad()
Computations / descriptive stats,"DataFrame.max([axis, skipna, level, ...])",Return the maximum of the values over the requested axis.,maximum over asix,Function,"['axis', 'skipna', 'level', '...']",DataFrame.max()
Computations / descriptive stats,"DataFrame.mean([axis, skipna, level, ...])",Return the mean of the values over the requested axis.,mean over axis,Function,"['axis', 'skipna', 'level', '...']",DataFrame.mean()
Computations / descriptive stats,"DataFrame.median([axis, skipna, level, ...])",Return the median of the values over the requested axis.,median over axis,Function,"['axis', 'skipna', 'level', '...']",DataFrame.median()
Computations / descriptive stats,"DataFrame.min([axis, skipna, level, ...])",Return the minimum of the values over the requested axis.,minimum over axis,Function,"['axis', 'skipna', 'level', '...']",DataFrame.min()
Computations / descriptive stats,"DataFrame.mode([axis, numeric_only, dropna])",Get the mode(s) of each element along the selected axis.,mode over axis,Function,"['axis', 'numeric_only', 'dropna']",DataFrame.mode()
Computations / descriptive stats,"DataFrame.pct_change([periods, fill_method, ...])",Percentage change between the current and a prior element.,percentage change,Function,"['periods', 'fill_method', '...']",DataFrame.pct_change()
Computations / descriptive stats,"DataFrame.prod([axis, skipna, level, ...])",Return the product of the values over the requested axis.,product over axis,Function,"['axis', 'skipna', 'level', '...']",DataFrame.prod()
Computations / descriptive stats,"DataFrame.product([axis, skipna, level, ...])",Return the product of the values over the requested axis.,product over axis,Function,"['axis', 'skipna', 'level', '...']",DataFrame.product()
Computations / descriptive stats,"DataFrame.quantile([q, axis, numeric_only, ...])",Return values at the given quantile over requested axis.,quatile over axis,Function,"['q', 'axis', 'numeric_only', '...']",DataFrame.quantile()
Computations / descriptive stats,"DataFrame.rank([axis, method, numeric_only, ...])",Compute numerical data ranks (1 through n) along axis.,data ranks,Function,"['axis', 'method', 'numeric_only', '...']",DataFrame.rank()
Computations / descriptive stats,DataFrame.round([decimals]),Round a DataFrame to a variable number of decimal places.,round off,Function,['decimals'],DataFrame.round()
Computations / descriptive stats,"DataFrame.sem([axis, skipna, level, ddof, ...])",Return unbiased standard error of the mean over requested axis.,standard error,Function,"['axis', 'skipna', 'level', 'ddof', '...']",DataFrame.sem()
Computations / descriptive stats,"DataFrame.skew([axis, skipna, level, ...])",Return unbiased skew over requested axis.,skew ,Function,"['axis', 'skipna', 'level', '...']",DataFrame.skew()
Computations / descriptive stats,"DataFrame.sum([axis, skipna, level, ...])",Return the sum of the values over the requested axis.,sum over axis,Function,"['axis', 'skipna', 'level', '...']",DataFrame.sum()
Computations / descriptive stats,"DataFrame.std([axis, skipna, level, ddof, ...])",Return sample standard deviation over requested axis.,standard deviation over axis,Function,"['axis', 'skipna', 'level', 'ddof', '...']",DataFrame.std()
Computations / descriptive stats,"DataFrame.var([axis, skipna, level, ddof, ...])",Return unbiased variance over requested axis.,variance,Function,"['axis', 'skipna', 'level', 'ddof', '...']",DataFrame.var()
Computations / descriptive stats,"DataFrame.nunique([axis, dropna])",Count number of distinct elements in specified axis.,unique elements over axis,Function,"['axis', 'dropna']",DataFrame.nunique()
Computations / descriptive stats,"DataFrame.value_counts([subset, normalize, ...])",Return a Series containing counts of unique rows in the DataFrame.,unique column values,Function,"['subset', 'normalize', '...']",DataFrame.value_counts()
Reindexing / selection / label manipulation,DataFrame.add_prefix(prefix),Prefix labels with string prefix.,prefix,Function,['prefix'],DataFrame.add_prefix()
Reindexing / selection / label manipulation,DataFrame.add_suffix(suffix),Suffix labels with string suffix.,suffix,Function,['suffix'],DataFrame.add_suffix()
Reindexing / selection / label manipulation,"DataFrame.align(other[, join, axis, level, ...])",Align two objects on their axes with the specified join method.,align,Function,"['other', 'join', 'axis', 'level', '...']",DataFrame.align()
Reindexing / selection / label manipulation,"DataFrame.at_time(time[, asof, axis])","Select values at particular time of day (e.g., 9:30AM).",values at specific time,Function,"['time', 'asof', 'axis']",DataFrame.at_time()
Reindexing / selection / label manipulation,"DataFrame.between_time(start_time, end_time)","Select values between particular times of the day (e.g., 9:00-9:30 AM).",values betwwen time,Function,"['start_time', 'end_time']",DataFrame.between_time()
Reindexing / selection / label manipulation,"DataFrame.drop([labels, axis, index, ...])",Drop specified labels from rows or columns.,drop row or column,Function,"['labels', 'axis', 'index', '...']",DataFrame.drop()
Reindexing / selection / label manipulation,"DataFrame.drop_duplicates([subset, keep, ...])",Return DataFrame with duplicate rows removed.,remove duplicates,Function,"['subset', 'keep', '...']",DataFrame.drop_duplicates()
Reindexing / selection / label manipulation,"DataFrame.duplicated([subset, keep])",Return boolean Series denoting duplicate rows.,find duplicates,Function,"['subset', 'keep']",DataFrame.duplicated()
Reindexing / selection / label manipulation,DataFrame.equals(other),Test whether two objects contain the same elements.,equal or not,Function,['other'],DataFrame.equals()
Reindexing / selection / label manipulation,"DataFrame.filter([items, like, regex, axis])",Subset the dataframe rows or columns according to the specified index labels.,subset dataframe,Function,"['items', 'like', 'regex', 'axis']",DataFrame.filter()
Reindexing / selection / label manipulation,DataFrame.first(offset),Select initial periods of time series data based on a date offset.,initial time series,Function,['offset'],DataFrame.first()
Reindexing / selection / label manipulation,DataFrame.head([n]),Return the first n rows.,top rows,Function,['n'],DataFrame.head()
Reindexing / selection / label manipulation,"DataFrame.idxmax([axis, skipna, numeric_only])",Return index of first occurrence of maximum over requested axis.,first occurence index max,Function,"['axis', 'skipna', 'numeric_only']",DataFrame.idxmax()
Reindexing / selection / label manipulation,"DataFrame.idxmin([axis, skipna, numeric_only])",Return index of first occurrence of minimum over requested axis.,first occurence index min,Function,"['axis', 'skipna', 'numeric_only']",DataFrame.idxmin()
Reindexing / selection / label manipulation,DataFrame.last(offset),Select final periods of time series data based on a date offset.,end time series,Function,['offset'],DataFrame.last()
Reindexing / selection / label manipulation,"DataFrame.reindex([labels, index, columns, ...])",Conform Series/DataFrame to new index with optional filling logic.,reindex,Function,"['labels', 'index', 'columns', '...']",DataFrame.reindex()
Reindexing / selection / label manipulation,"DataFrame.reindex_like(other[, method, ...])",Return an object with matching indices as other object.,reindex as other,Function,"['other', 'method', '...']",DataFrame.reindex_like()
Reindexing / selection / label manipulation,"DataFrame.rename([mapper, index, columns, ...])",Alter axes labels.,rename column,Function,"['mapper', 'index', 'columns', '...']",DataFrame.rename()
Reindexing / selection / label manipulation,"DataFrame.rename_axis([mapper, index, ...])",Set the name of the axis for the index or columns.,rename axis,Function,"['mapper', 'index', '...']",DataFrame.rename_axis()
Reindexing / selection / label manipulation,"DataFrame.reset_index([level, drop, ...])","Reset the index, or a level of it.",reset index,Function,"['level', 'drop', '...']",DataFrame.reset_index()
Reindexing / selection / label manipulation,"DataFrame.sample([n, frac, replace, ...])",Return a random sample of items from an axis of object.,random sample,Function,"['n', 'frac', 'replace', '...']",DataFrame.sample()
Reindexing / selection / label manipulation,"DataFrame.set_axis(labels[, axis, inplace, copy])",Assign desired index to given axis.,change axis label,Function,"['labels', 'axis', 'inplace', 'copy']",DataFrame.set_axis()
Reindexing / selection / label manipulation,"DataFrame.set_index(keys[, drop, append, ...])",Set the DataFrame index using existing columns.,set index from column,Function,"['keys', 'drop', 'append', '...']",DataFrame.set_index()
Reindexing / selection / label manipulation,DataFrame.tail([n]),Return the last n rows.,last rows,Function,['n'],DataFrame.tail()
Reindexing / selection / label manipulation,"DataFrame.take(indices[, axis, is_copy])",Return the elements in the given positional indices along an axis.,element by index,Function,"['indices', 'axis', 'is_copy']",DataFrame.take()
Reindexing / selection / label manipulation,"DataFrame.truncate([before, after, axis, copy])",Truncate a Series or DataFrame before and after some index value.,cut off,Function,"['before', 'after', 'axis', 'copy']",DataFrame.truncate()
Missing data handling,"DataFrame.backfill([axis, inplace, limit, ...])",Synonym for DataFrame.fillna() with method='bfill'.,back fill,Function,"['axis', 'inplace', 'limit', '...']",DataFrame.backfill()
Missing data handling,"DataFrame.bfill([axis, inplace, limit, downcast])",Synonym for DataFrame.fillna() with method='bfill'.,back fill,Function,"['axis', 'inplace', 'limit', 'downcast']",DataFrame.bfill()
Missing data handling,"DataFrame.dropna([axis, how, thresh, ...])",Remove missing values.,remove null,Function,"['axis', 'how', 'thresh', '...']",DataFrame.dropna()
Missing data handling,"DataFrame.ffill([axis, inplace, limit, downcast])",Synonym for DataFrame.fillna() with method='ffill'.,forward fill,Function,"['axis', 'inplace', 'limit', 'downcast']",DataFrame.ffill()
Missing data handling,"DataFrame.fillna([value, method, axis, ...])",Fill NA/NaN values using the specified method.,handle null,Function,"['value', 'method', 'axis', '...']",DataFrame.fillna()
Missing data handling,"DataFrame.interpolate([method, axis, limit, ...])",Fill NaN values using an interpolation method.,interpolation,Function,"['method', 'axis', 'limit', '...']",DataFrame.interpolate()
Missing data handling,DataFrame.isna(),Detect missing values.,find null,Function,[''],DataFrame.isna()
Missing data handling,DataFrame.isnull(),DataFrame.isnull is an alias for DataFrame.isna.,check null,Function,[''],DataFrame.isnull()
Missing data handling,DataFrame.notna(),Detect existing (non-missing) values.,find not null,Function,[''],DataFrame.notna()
Missing data handling,DataFrame.notnull(),DataFrame.notnull is an alias for DataFrame.notna.,check not null,Function,[''],DataFrame.notnull()
Missing data handling,"DataFrame.pad([axis, inplace, limit, downcast])",Synonym for DataFrame.fillna() with method='ffill'.,ffill,Function,"['axis', 'inplace', 'limit', 'downcast']",DataFrame.pad()
Missing data handling,"DataFrame.replace([to_replace, value, ...])",Replace values given in to_replace with value.,replace value,Function,"['to_replace', 'value', '...']",DataFrame.replace()
"Reshaping, sorting, transposing","DataFrame.droplevel(level[, axis])",Return Series/DataFrame with requested index / column level(s) removed.,remove and return row or col,Function,"['level', 'axis']",DataFrame.droplevel()
"Reshaping, sorting, transposing","DataFrame.pivot([index, columns, values])",Return reshaped DataFrame organized by given index / column values.,reshape dataframe,Function,"['index', 'columns', 'values']",DataFrame.pivot()
"Reshaping, sorting, transposing","DataFrame.pivot_table([values, index, ...])",Create a spreadsheet-style pivot table as a DataFrame.,pivot table,Function,"['values', 'index', '...']",DataFrame.pivot_table()
"Reshaping, sorting, transposing","DataFrame.reorder_levels(order[, axis])",Rearrange index levels using input order.,rearrange index,Function,"['order', 'axis']",DataFrame.reorder_levels()
"Reshaping, sorting, transposing","DataFrame.sort_values(by[, axis, ascending, ...])",Sort by the values along either axis.,sort by axis,Function,"['by', 'axis', 'ascending', '...']",DataFrame.sort_values()
"Reshaping, sorting, transposing","DataFrame.sort_index([axis, level, ...])",Sort object by labels (along an axis).,sort by label,Function,"['axis', 'level', '...']",DataFrame.sort_index()
"Reshaping, sorting, transposing","DataFrame.nlargest(n, columns[, keep])",Return the first n rows ordered by columns in descending order.,n largest,Function,"['n', 'columns', 'keep']",DataFrame.nlargest()
"Reshaping, sorting, transposing","DataFrame.nsmallest(n, columns[, keep])",Return the first n rows ordered by columns in ascending order.,n smallest,Function,"['n', 'columns', 'keep']",DataFrame.nsmallest()
"Reshaping, sorting, transposing","DataFrame.swaplevel([i, j, axis])",Swap levels i and j in a MultiIndex.,swap level,Function,"['i', 'j', 'axis']",DataFrame.swaplevel()
"Reshaping, sorting, transposing","DataFrame.stack([level, dropna])",Stack the prescribed level(s) from columns to index.,stack,Function,"['level', 'dropna']",DataFrame.stack()
"Reshaping, sorting, transposing","DataFrame.unstack([level, fill_value])",Pivot a level of the (necessarily hierarchical) index labels.,unstack,Function,"['level', 'fill_value']",DataFrame.unstack()
"Reshaping, sorting, transposing","DataFrame.swapaxes(axis1, axis2[, copy])",Interchange axes and swap values axes appropriately.,swap axis,Function,"['axis1', 'axis2', 'copy']",DataFrame.swapaxes()
"Reshaping, sorting, transposing","DataFrame.melt([id_vars, value_vars, ...])","Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.",un pivot,Function,"['id_vars', 'value_vars', '...']",DataFrame.melt()
"Reshaping, sorting, transposing","DataFrame.explode(column[, ignore_index])","Transform each element of a list-like to a row, replicating index values.",elements of column to a row,Function,"['column', 'ignore_index']",DataFrame.explode()
"Reshaping, sorting, transposing",DataFrame.squeeze([axis]),Squeeze 1 dimensional axis objects into scalars.,squeeze,Function,['axis'],DataFrame.squeeze()
"Reshaping, sorting, transposing",DataFrame.to_xarray(),Return an xarray object from the pandas object.,to array,Function,[''],DataFrame.to_xarray()
"Reshaping, sorting, transposing",DataFrame.T,"DataFrame.transpose(*args[, copy])",transpose,Attribute,,DataFrame.T
Combining / comparing / joining / merging,"DataFrame.append(other[, ignore_index, ...])","(DEPRECATED) Append rows of other to the end of caller, returning a new object.",append,Function,"['other', 'ignore_index', '...']",DataFrame.append()
Combining / comparing / joining / merging,DataFrame.assign(**kwargs),Assign new columns to a DataFrame.,assign new column,Function,['**kwargs'],DataFrame.assign()
Combining / comparing / joining / merging,"DataFrame.compare(other[, align_axis, ...])",Compare to another DataFrame and show the differences.,compare,Function,"['other', 'align_axis', '...']",DataFrame.compare()
Combining / comparing / joining / merging,"DataFrame.join(other[, on, how, lsuffix, ...])",Join columns of another DataFrame.,join column of different dataframe,Function,"['other', 'on', 'how', 'lsuffix', '...']",DataFrame.join()
Combining / comparing / joining / merging,"DataFrame.merge(right[, how, on, left_on, ...])",Merge DataFrame or named Series objects with a database-style join.,merge,Function,"['right', 'how', 'on', 'left_on', '...']",DataFrame.merge()
Combining / comparing / joining / merging,"DataFrame.update(other[, join, overwrite, ...])",Modify in place using non-NA values from another DataFrame.,update,Function,"['other', 'join', 'overwrite', '...']",DataFrame.update()
Time Series-related,"DataFrame.asfreq(freq[, method, how, ...])",Convert time series to specified frequency.,covert as frequency,Function,"['freq', 'method', 'how', '...']",DataFrame.asfreq()
Time Series-related,"DataFrame.asof(where[, subset])",Return the last row(s) without any NaNs before where.,last non null,Function,"['where', 'subset']",DataFrame.asof()
Time Series-related,"DataFrame.shift([periods, freq, axis, ...])",Shift index by desired number of periods with an optional time freq.,shift index time series,Function,"['periods', 'freq', 'axis', '...']",DataFrame.shift()
Time Series-related,"DataFrame.slice_shift([periods, axis])",(DEPRECATED) Equivalent to shift without copying data.,slice shift ,Function,"['periods', 'axis']",DataFrame.slice_shift()
Time Series-related,"DataFrame.tshift([periods, freq, axis])","(DEPRECATED) Shift the time index, using the index's frequency if available.",shift by time,Function,"['periods', 'freq', 'axis']",DataFrame.tshift()
Time Series-related,DataFrame.first_valid_index(),"Return index for first non-NA value or None, if no non-NA value is found.",first valid index,Function,[''],DataFrame.first_valid_index()
Time Series-related,DataFrame.last_valid_index(),"Return index for last non-NA value or None, if no non-NA value is found.",last valid index,Function,[''],DataFrame.last_valid_index()
Time Series-related,"DataFrame.resample(rule[, axis, closed, ...])",Resample time-series data.,resample time series data,Function,"['rule', 'axis', 'closed', '...']",DataFrame.resample()
Time Series-related,"DataFrame.to_period([freq, axis, copy])",Convert DataFrame from DatetimeIndex to PeriodIndex.,date to period index,Function,"['freq', 'axis', 'copy']",DataFrame.to_period()
Time Series-related,"DataFrame.to_timestamp([freq, how, axis, copy])","Cast to DatetimeIndex of timestamps, at beginning of period.",to timestamps,Function,"['freq', 'how', 'axis', 'copy']",DataFrame.to_timestamp()
Time Series-related,"DataFrame.tz_convert(tz[, axis, level, copy])",Convert tz-aware axis to target time zone.,target time zone,Function,"['tz', 'axis', 'level', 'copy']",DataFrame.tz_convert()
Time Series-related,"DataFrame.tz_localize(tz[, axis, level, ...])",Localize tz-naive index of a Series or DataFrame to target time zone.,,Function,"['tz', 'axis', 'level', '...']",DataFrame.tz_localize()
Flags,"Flags(obj, *, allows_duplicate_labels)","Flags refer to attributes of the pandas object. Properties of the dataset (like the date is was recorded, the URL it was accessed from, etc.) should be stored in DataFrame.attrs.",,Function,"['obj', '*', 'allows_duplicate_labels']",Flags()
Metadata,Warning,DataFrame.attrs is a dictionary for storing global metadata for this DataFrame.,,Attribute,,Warning
Metadata,DataFrame.attrs,DataFrame.attrs is considered experimental and may change without warning.,,Attribute,,DataFrame.attrs
Plotting,"DataFrame.plot([x, y, kind, ax, ....])",DataFrame.plot is both a callable method and a namespace attribute for specific plotting methods of the form DataFrame.plot.<kind>.,visualize,Function,"['x', 'y', 'kind', 'ax', '....']",DataFrame.plot()
Plotting,"DataFrame.plot.area([x, y])",Draw a stacked area plot.,area plot,Function,"['x', 'y']",DataFrame.plot.area()
Plotting,"DataFrame.plot.bar([x, y])",Vertical bar plot.,vertical bar plot,Function,"['x', 'y']",DataFrame.plot.bar()
Plotting,"DataFrame.plot.barh([x, y])",Make a horizontal bar plot.,horizontal box plot,Function,"['x', 'y']",DataFrame.plot.barh()
Plotting,DataFrame.plot.box([by]),Make a box plot of the DataFrame columns.,vertical box plot,Function,['by'],DataFrame.plot.box()
Plotting,"DataFrame.plot.density([bw_method, ind])",Generate Kernel Density Estimate plot using Gaussian kernels.,density plot,Function,"['bw_method', 'ind']",DataFrame.plot.density()
Plotting,"DataFrame.plot.hexbin(x, y[, C, ...])",Generate a hexagonal binning plot.,hexagonal bin plot,Function,"['x', 'y', 'C', '...']",DataFrame.plot.hexbin()
Plotting,"DataFrame.plot.hist([by, bins])",Draw one histogram of the DataFrame's columns.,histogram,Function,"['by', 'bins']",DataFrame.plot.hist()
Plotting,"DataFrame.plot.kde([bw_method, ind])",Generate Kernel Density Estimate plot using Gaussian kernels.,kde plot,Function,"['bw_method', 'ind']",DataFrame.plot.kde()
Plotting,"DataFrame.plot.line([x, y])",Plot Series or DataFrame as lines.,line plot,Function,"['x', 'y']",DataFrame.plot.line()
Plotting,DataFrame.plot.pie(**kwargs),Generate a pie plot.,pie plot,Function,['**kwargs'],DataFrame.plot.pie()
Plotting,"DataFrame.plot.scatter(x, y[, s, c])",Create a scatter plot with varying marker point size and color.,scatter plot,Function,"['x', 'y', 's', 'c']",DataFrame.plot.scatter()
Plotting,"DataFrame.boxplot([column, by, ax, ...])",Make a box plot from DataFrame columns.,one boxplot per column,Function,"['column', 'by', 'ax', '...']",DataFrame.boxplot()
Plotting,"DataFrame.hist([column, by, grid, ...])","A histogram is a representation of the distribution of data. This function calls matplotlib.pyplot.hist(), on each series in the DataFrame, resulting in one histogram per column.",one histogram per column,Function,"['column', 'by', 'grid', '...']",DataFrame.hist()
Sparse accessor,DataFrame.sparse.density,Sparse-dtype specific methods and attributes are provided under the DataFrame.sparse accessor.,sparse density,Attribute,,DataFrame.sparse.density
Sparse accessor,"DataFrame.sparse.from_spmatrix(data[, ...])",Ratio of non-sparse points to total (dense) data points.,non sparse point ratio,Function,"['data', '...']",DataFrame.sparse.from_spmatrix()
Sparse accessor,DataFrame.sparse.to_coo(),Create a new DataFrame from a scipy sparse matrix.,create new df from a scipy sparse matrix,Function,[''],DataFrame.sparse.to_coo()
Sparse accessor,DataFrame.sparse.to_dense(),Return the contents of the frame as a sparse SciPy COO matrix., sparse scipy coo matrix,Function,[''],DataFrame.sparse.to_dense()
Serialization / IO / conversion,"DataFrame.from_dict(data[, orient, dtype, ...])",Construct DataFrame from dict of array-like or dicts.,df from dictionary,Function,"['data', 'orient', 'dtype', '...']",DataFrame.from_dict()
Serialization / IO / conversion,"DataFrame.from_records(data[, index, ...])",Convert structured or record ndarray to DataFrame.,ndarray to dataframe,Function,"['data', 'index', '...']",DataFrame.from_records()
Serialization / IO / conversion,"DataFrame.to_orc([path, engine, index, ...])",Write a DataFrame to the ORC format.,write orc,Function,"['path', 'engine', 'index', '...']",DataFrame.to_orc()
Serialization / IO / conversion,"DataFrame.to_parquet([path, engine, ...])",Write a DataFrame to the binary parquet format.,write binary parquet format,Function,"['path', 'engine', '...']",DataFrame.to_parquet()
Serialization / IO / conversion,"DataFrame.to_pickle(path[, compression, ...])",Pickle (serialize) object to file.,pickle serealize object,Function,"['path', 'compression', '...']",DataFrame.to_pickle()
Serialization / IO / conversion,"DataFrame.to_csv([path_or_buf, sep, na_rep, ...])",Write object to a comma-separated values (csv) file.,write csv,Function,"['path_or_buf', 'sep', 'na_rep', '...']",DataFrame.to_csv()
Serialization / IO / conversion,"DataFrame.to_hdf(path_or_buf, key[, mode, ...])",Write the contained data to an HDF5 file using HDFStore.,write hdf,Function,"['path_or_buf', 'key', 'mode', '...']",DataFrame.to_hdf()
Serialization / IO / conversion,"DataFrame.to_sql(name, con[, schema, ...])",Write records stored in a DataFrame to a SQL database.,write sql,Function,"['name', 'con', 'schema', '...']",DataFrame.to_sql()
Serialization / IO / conversion,"DataFrame.to_dict([orient, into])",Convert the DataFrame to a dictionary.,write dictionary,Function,"['orient', 'into']",DataFrame.to_dict()
Serialization / IO / conversion,"DataFrame.to_excel(excel_writer[, ...])",Write object to an Excel sheet.,write excel,Function,"['excel_writer', '...']",DataFrame.to_excel()
Serialization / IO / conversion,"DataFrame.to_json([path_or_buf, orient, ...])",Convert the object to a JSON string.,write json,Function,"['path_or_buf', 'orient', '...']",DataFrame.to_json()
Serialization / IO / conversion,"DataFrame.to_html([buf, columns, col_space, ...])",Render a DataFrame as an HTML table.,write html,Function,"['buf', 'columns', 'col_space', '...']",DataFrame.to_html()
Serialization / IO / conversion,"DataFrame.to_feather(path, **kwargs)",Write a DataFrame to the binary Feather format.,write binary,Function,"['path', '**kwargs']",DataFrame.to_feather()
Serialization / IO / conversion,"DataFrame.to_latex([buf, columns, ...])","Render object to a LaTeX tabular, longtable, or nested table.",write latex,Function,"['buf', 'columns', '...']",DataFrame.to_latex()
Serialization / IO / conversion,"DataFrame.to_stata(path[, convert_dates, ...])",Export DataFrame object to Stata dta format.,dataframe to stata dta,Function,"['path', 'convert_dates', '...']",DataFrame.to_stata()
Serialization / IO / conversion,"DataFrame.to_gbq(destination_table[, ...])",Write a DataFrame to a Google BigQuery table.,data frame to google big query table gbq,Function,"['destination_table', '...']",DataFrame.to_gbq()
Serialization / IO / conversion,"DataFrame.to_records([index, column_dtypes, ...])",Convert DataFrame to a NumPy record array.,dataframe to numpy array,Function,"['index', 'column_dtypes', '...']",DataFrame.to_records()
Serialization / IO / conversion,"DataFrame.to_string([buf, columns, ...])",Render a DataFrame to a console-friendly tabular output.,dataframe to tabular ,Function,"['buf', 'columns', '...']",DataFrame.to_string()
Serialization / IO / conversion,"DataFrame.to_clipboard([excel, sep])",Copy object to the system clipboard.,copy to clipboard,Function,"['excel', 'sep']",DataFrame.to_clipboard()
Serialization / IO / conversion,"DataFrame.to_markdown([buf, mode, index, ...])",Print DataFrame in Markdown-friendly format.,markdown friendly format,Function,"['buf', 'mode', 'index', '...']",DataFrame.to_markdown()
Serialization / IO / conversion,DataFrame.style,Returns a Styler object.,change style,Attribute,,DataFrame.style
Serialization / IO / conversion,"DataFrame.__dataframe__([nan_as_null, ...])",Return the dataframe interchange object implementing the interchange protocol.,interchange object implementing the interchange protocol,Function,"['nan_as_null', '...']",DataFrame.__dataframe__()
